# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LpmProcessingModel
                                 A QGIS plugin
 Description
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-12
        copyright            : (C) 2023 by SurveyoStories
        email                : surveyorstories@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

/***************************************************************************
Name                 : QRBarCodePluginLoader
Description          : Loader for the QR and bar code layout layout
Date                 : 07-07-2020
copyright            : (C) 2020 by John Gitau
email                : gkahiu@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 """


import os
import sys
import inspect

from qgis.PyQt.QtWidgets import QAction
from qgis.PyQt.QtGui import QIcon
import processing
from qgis.core import QgsProcessingAlgorithm, QgsApplication
from .Bhu_Kamatha_provider import LpmProcessingModelProvider
from .topo_layout_box import MyForm
# qrcode plugin data
from bhu_kamatha.gui.registry import register_items_gui_metadata
from bhu_kamatha.layout.svg_tracker import SvgFileTracker
from bhu_kamatha.layout.linear_metadata import \
    register_linear_barcode_metadata
from bhu_kamatha.layout.registry import register_barcode_items
from qgis.PyQt.QtCore import (
    QSettings,
    QTranslator,
    qVersion,
    QCoreApplication
)
import os.path
__author__ = 'SurveyoStories'
__date__ = '2023-03-12'
__copyright__ = '(C) 2023 by SurveyoStories'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


# qrcode plugin data
import os.path
__author__ = 'SurveyoStories'
__date__ = '2023-03-12'
__copyright__ = '(C) 2023 by SurveyoStories'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

# qrcode plugin data
__author__ = 'SurveyoStories'
__date__ = '2023-03-12'
__copyright__ = '(C) 2023 by SurveyoStories'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]


if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

my_form = MyForm()


class LpmProcessingModelPlugin(object):

    def __init__(self, iface):
        self.provider = None
        self.iface = iface

        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'qrc_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = LpmProcessingModelProvider()
        # self.provider1 = AnotherProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)
        # QgsApplication.processingRegistry().addProvider(self.provider1)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):  # pylint: disable=no-self-use
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QrBarCodeLayoutItem', message)

    def initGui(self):
        self.initProcessing()
 # CREATES THE ICON AND MENU NAME OF THE ALGORITHMS
        icon = os.path.join(os.path.join(cmd_folder, 'images/icon1.svg'))
        icon1 = os.path.join(os.path.join(cmd_folder, 'images/download.svg'))
        icon2 = os.path.join(os.path.join(cmd_folder, 'images/template.png'))
        topo = os.path.join(os.path.join(cmd_folder, 'images/topo.svg'))
        self.action = QAction(
            QIcon(icon),
            u"LPM Processing", self.iface.mainWindow())

        self.action1 = QAction(
            QIcon(icon2),
            u"Add LPM Templates to Project", self.iface.mainWindow())

        self.action2 = QAction(QIcon(icon1), 'Download Latest Files',
                               self.iface.mainWindow())
        self.action3 = QAction(QIcon(topo), 'Topo Layers Creation ',
                               self.iface.mainWindow())

        """Register QR and barcode layout items in QGIS layout item
        registry.
        """
        register_barcode_items()
        register_items_gui_metadata()

        # Register metadata for the different linear barcode types
        register_linear_barcode_metadata()

# TRIGGER THE ALGORITHM ON CLICK
        self.action.triggered.connect(self.run)
        self.action1.triggered.connect(self.run_algorithm1)
        self.action2.triggered.connect(self.run_algorithm2)
        self.action3.triggered.connect(self.run3)

# ADDING PLUGIN ALGORITHM SUB MENUS TO PLUGIN MENU
        self.iface.addPluginToMenu(
            u"&Bhu Kamatha", self.action)

        self.iface.addPluginToMenu(
            u"&Bhu Kamatha", self.action1)
        self.iface.addPluginToMenu(
            u"&Bhu Kamatha", self.action2)
        self.iface.addPluginToMenu(
            u"&Bhu Kamatha", self.action3)

 # ADDING PLUGIN ALGORITHMS TO  TOOLBAR
        self.toolbar = self.iface.addToolBar('Bhu Kamatha')

        # self.action2 = QAction(QIcon(icon), 'LPM Processing',
        #                        self.iface.mainWindow())
        self.toolbar.addAction(self.action)
        self.toolbar.addAction(self.action1)
        # self.action.triggered.connect(self.run)

        self.toolbar.addAction(self.action2)
        self.toolbar.addAction(self.action3)

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
        self.iface.removePluginMenu(
            u"&Bhu Kamatha", self.action)
        self.iface.removePluginMenu(
            u"&Bhu Kamatha", self.action1)
        self.iface.removePluginMenu(
            u"&Bhu Kamatha", self.action2)
        self.iface.removePluginMenu(
            u"&Bhu Kamatha", self.action3)
 # Removing the action from the toolbar
        self.iface.removeToolBarIcon(self.action)
        self.iface.removeToolBarIcon(self.action1)
        self.iface.removeToolBarIcon(self.action2)
        self.iface.removeToolBarIcon(self.action3)

        """Clear SVG files in temp directory."""
        SvgFileTracker.instance().clean_up()

    def run(self):
        processing.execAlgorithmDialog("Bhu Kamatha:LPM Processing Model")

    def run_algorithm1(self):
        processing.execAlgorithmDialog("Bhu Kamatha:AddLayoutsToProject")

    def run_algorithm2(self):
        processing.execAlgorithmDialog("Bhu Kamatha:download_files")

    def run3(self):
        my_form.exec_()
